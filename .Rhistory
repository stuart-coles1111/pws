}
rank_probs_rec_orig <- function(k, m=k, nracers = 5, rem = 1:nracers, l = runif(nracers), a = c(.2, .1, runif(3))){
if(m == 2){
res3 <- expmod_win2_prob(1:2, nracers, 1:nracers, l, a)
return(res3)
}
else{
if(a[1] > a[2]) {
l_new <- l[-1]
a_new <- a[-1]
a_new[1] <- a[1]
a_new[2] <- a[3]
l_new2 <- l[-1]
l_new2[1] <- l[1] + l[2]
res1 <- lexp(l, a, 2, 1:2) * (
rank_probs_rec_orig(k, m - 1, nracers - 1, 1:(nracers - 1), l_new, a_new) -
lratio(l, 2, 1:2) * rank_probs_rec_orig(k, m - 1, nracers - 1, 1:(nracers - 1), l_new2, a_new)
)
return(res1)
}
else{
l_new <- l[-1]
a_new <- a[-1]
a_new[1] <- a[2]
a_new[2] <- a[3]
l_new2 <- l[-1]
l_new2[1] <- l[1] + l[2]
res2 <- rank_probs_rec_orig(k, m - 1, nracers - 1, 1:(nracers - 1), l_new, a_new) -
lexp(l, a, 1, 2:1) * lratio(l, 2, 1:2) * rank_probs_rec_orig(k, m - 1, nracers - 1, 1:(nracers - 1), l_new2, a_new)
return(res2)
}
}
}
rank_probs_rec <- function(k, m=k, nracers = 5, rem = 1:nracers, l = runif(nracers), a = c(.2, .1, runif(3))){
if(m == 1){
res <- expmod_win_prob(1, l, a)
return(res)
}
else{
if(a[1] > a[2]) {
l_new <- l[-1]
a_new <- a[-1]
a_new[1] <- a[1]
a_new[2] <- a[3]
l_new2 <- l[-1]
l_new2[1] <- l[1] + l[2]
res <- lexp(l, a, 2, 1:2) * (
rank_probs_rec(k, m - 1, nracers - 1, 1:(nracers - 1), l_new, a_new) -
lratio(l, 2, 1:2) * rank_probs_rec(k, m - 1, nracers - 1, 1:(nracers - 1), l_new2, a_new)
)
return(res)
}
else{
l_new <- l[-1]
a_new <- a[-1]
a_new[1] <- a[2]
a_new[2] <- a[3]
l_new2 <- l[-1]
l_new2[1] <- l[1] + l[2]
res <- rank_probs_rec(k, m - 1, nracers - 1, 1:(nracers - 1), l_new, a_new) -
lexp(l, a, 1, 2:1) * lratio(l, 2, 1:2) * rank_probs_rec(k, m - 1, nracers - 1, 1:(nracers - 1), l_new2, a_new)
return(res)
}
}
}
expmod_win2_prob<- function(ws, nracers = 5, rem = 1:nracers, l = runif(nracers), a = runif(nracers)){
if(a[ws[1]] < a[ws[2]]) {
l_new <- l[-ws[1]]
a_new <- a[-ws[1]]
rem_new <- setdiff(rem, ws[1])
ind_new <- which(rem_new == ws[2])
s2 <- (1 - lexp(l, a, ws[1], rev(ws))) * expmod_win_prob(ind_new, l_new, a_new)
l_new2 <- l_new
l_new2[ind_new] <- sum(l[ws])
l_new3 <- l[-ws[2]]
rem_new2 <- setdiff(rem, ws[2])
ind_new2 <- which(rem_new2 == ws[1])
s1 <- lexp(l, a, ws[1], rev(ws)) * (
expmod_win_prob(ind_new, l_new, a_new) - lratio(l, ws[2], ws) * expmod_win_prob(ind_new, l_new2, a_new)
)
res <- s1 + s2
}
else{
l_new <- l[-ws[1]]
a_new <- a[-ws[2]]
rem_new <- setdiff(rem, ws[1])
ind_new <- which(rem_new == ws[2])
l_new2 <- l_new
l_new2[ind_new] <- sum(l[ws])
res <- lexp(l, a, ws[2], ws) * (expmod_win_prob(ind_new, l_new, a_new) -lratio(l, ws[2], ws) * expmod_win_prob(ind_new, l_new2, a_new))
}
return(res)
}
# =================================================================================================================================
gum_mod_probs  <- function(b = c(1, 2 ,3), a = c(0, 0, 0), alpha = 1){
exp(-(b + a) / alpha)/sum(exp(-(b + a) / alpha))
}
race_nllh <- function(beta, model = model1, race_df, first_Run=TRUE, second_Run=TRUE, allranks = TRUE, maxrank = 10, exclude_second_Run=NULL, print = FALSE){
races <- unique(race_df$race)
n_races <- length(races)
l1 <- 0
if(first_Run){
#first Run...
Run <- 1
if(model$type == "gumbel") {
eval(parse(text = model$alpha_ind))
eval(parse(text = model$alpha))
}
for(race_number in 1:n_races){
df <- subset(race_df, race == races[race_number])
df <- arrange(df, time1) #arrange by first Run times
nr <- nrow(df)
eval(parse(text = model$lambda1))
if(model$type == "gumbel")
{
for(i in 1:ifelse(allranks, nr - 1, min(maxrank -1, nr-1))){
l1 <- l1 - log(gum_mod_probs(lambda[i:nr], 0, alpha=alpha[race_number])[1])
}
}
else{
m <- ifelse(allranks, nr, min(maxrank, nr))
l1 <- l1 - log(rank_probs_rec(m, m, nr, 1:nr, lambda, rep(0, nr)))
}
}
}
# total race...
l2 <- 0
if(second_Run){
which_races <- 1:n_races
if(!is.null(exclude_second_Run)) which_races <- which_races[-exclude_second_Run]
Run <- 2
if(model$type == "gumbel") {
eval(parse(text = model$alpha_ind))
eval(parse(text = model$alpha))
}
for(race_number in which_races){
df <- subset(race_df, race == races[race_number])
df <- arrange(df, position) #arrange by final position
nr <- nrow(df)
eval(parse(text = model$lambda2))
if(model$type == "gumbel")
{
for(i in 1:ifelse(allranks, nr - 1, min(maxrank - 1, nr - 1))){
l2<- l2 - log(gum_mod_probs(lambda[i:nr], df$time1[i:nr], alpha = alpha[race_number])[1])
}
}
else{
m <- ifelse(allranks, nr, min(maxrank, nr))
l2 <- l2 - log(rank_probs_rec(m, m, nr, 1:nr, lambda, df$time1))
#              cat(race_number,l2,fill=TRUE)
#                browser()
}
}
}
l <- l1 + l2
if(print)  cat(l1, l2, l, fill=T)
l
}
fit <- function(model = model1, race_df = alldata, first_Run = TRUE, second_Run = TRUE, allranks = TRUE, maxrank = 10,  exclude_second_Run=NULL, nracers = 30, if_hessian = FALSE, init = 0, method = "BFGS", transform = TRUE, print = FALSE){
if(transform) race_df$points <- log(race_df$points + 1)
n_races <- race_df$race %>% unique %>% length
opt <- optim(rep(init, eval(parse(text=model$npar))), race_nllh, race_df = race_df, first_Run = first_Run, second_Run = second_Run, maxrank = maxrank, allranks = allranks,  exclude_second_Run = exclude_second_Run, model = model, control = list(maxit = 5000),method=method, hessian = if_hessian, print = print)
if(if_hessian)
se <- opt$hessian %>% solve %>% diag %>% sqrt
else
se <- NULL
list(model = model, opt = opt, par = opt$par, se =se)
}
pred <- function(race_df, race_number, beta, model, plot = TRUE, transform = TRUE){
if(transform) race_df$points <- log(race_df$points + 1)
races <- unique(race_df$race)
n_races <- length(races)
race_df <- arrange(race_df, bib2)
df <- race_df[race_df$race == races[race_number],]
nr <- nrow(df)
eval(parse(text = model$lambda2))
if(model$type == "gumbel") {
eval(parse(text = model$alpha_ind))
eval(parse(text = model$alpha))
}
if(model$type == "gumbel")
#pr <-  gum_mod_probs(lambda, df$time1, alpha = exp(beta[alpha_ind]))
pr <-  gum_mod_probs(lambda, df$time1, alpha = alpha[race_number])
else
pr <- expmod_win_prob.vec(1:nr, lambda, df$time1)
p_df <- data.frame(surname=df$surname, bib=df$bib2, Run1_pos=df$rank1, points=df$points, prob=pr, time1=df$time1)
p_df$diff <- p_df$time1 - min(p_df$time1)
#   if(plot == TRUE){
#       p_plot <- ggplot(p_df, aes(bib,prob)) +geom_point(col='steelblue')+ xlab('Second Run Start Position') + ylab('Race Win Probability') %>% print
#       p_plot %>% print
#   }
if(plot == TRUE){
p_plot <- ggplot(p_df, aes(diff,prob)) +geom_point(col='steelblue')+ xlab('First run time deficit (secs)') + ylab('Race Win Probability') %>% print
p_plot %>% print
}
p_df
}
#============================================================================================================================
# plotting functions
singleracerankplot <- function(race){
data=read.csv(files[race])
ggplot(data=data,aes(rank1,rank2)) + geom_point() + ggtitle('Position') + xlab("First Run") + ylab("Second Run") +
scale_x_continuous(breaks=c(1,5,10,15,20,25,30)) + scale_y_continuous(breaks=c(1,5,10,15,20,25,30)) +
stat_smooth(method='lm') +geom_abline(intercept=0, slope=1, colour="magenta")
}
labeller <- function(variable,value){
return(races[value])
}
#myColors <- brewer.pal(10, "Paired")
#names(myColors) <- levels(alldata$race)
#custom_colors <- scale_colour_manual(name = "Race", values = myColors)
rankplot <- function(data){
ggplot(data=data,aes(rank1,rank2)) + geom_point(aes(colour=race)) + ggtitle('Position') + xlab("First Run") + ylab("Second Run") +
scale_x_continuous(breaks=c(1,5,10,15,20,25,30)) + scale_y_continuous(breaks=c(1,5,10,15,20,25,30)) +
stat_smooth(method='lm',colour="steelblue")+ labs(colour = "Event") + custom_colors
}
racerankplot <- function(data){
ggplot(data=data,aes(rank1,rank2)) + geom_point(aes(colour=race)) + ggtitle('Position') + xlab("First Run") + ylab("Second Run") +
scale_x_continuous(breaks=c(1,5,10,15,20,25,30)) + scale_y_continuous(breaks=c(1,5,10,15,20,25,30)) +
stat_smooth(method='lm',colour="steelblue") + facet_wrap(race~., nrow=2) + guides(color = FALSE, size = FALSE)+ custom_colors
}
singlerankposplot <- function(data){
ggplot(data=data,aes(rank1,position)) + geom_point(aes(colour=race)) + ggtitle('Position') + xlab("First Run") + ylab("Overall") +
scale_x_continuous(breaks=c(1,5,10,15,20,25,30)) + scale_y_continuous(breaks=c(1,5,10,15,20,25,30)) +
stat_smooth(method='lm',colour="steelblue")+ labs(colour = "Event")+geom_abline(intercept=0, slope=1, colour="magenta")+ custom_colors
}
rankposplot <- function(data){
ggplot(data=data,aes(rank1,position)) + geom_point(aes(colour=race)) + ggtitle('Position') + xlab("First Run") + ylab("Overall") +
scale_x_continuous(breaks=c(1,5,10,15,20,25,30)) + scale_y_continuous(breaks=c(1,5,10,15,20,25,30)) +
stat_smooth(method='lm')+geom_abline(intercept=0, slope=1, colour="magenta")+ facet_wrap(race~., nrow=2) + guides(color = FALSE, size = FALSE)+ custom_colors
}
racetimeplot <- function(race){
data=read.csv(files[race])
ggplot(data=data,aes(time1,time2)) + geom_point() + ggtitle('Time (secs)') + xlab("First Run") + ylab("Second Run") +
stat_smooth(method='lm')+ custom_colors
}
timeplot <- function(data){
ggplot(data=data,aes(time1,time2)) + geom_point(aes(shape=number))  + xlab("First run time (secs)") + ylab("Second run time (secs)") +
stat_smooth(method='lm',colour="steelblue") + labs(colour = "Event")  +geom_abline(intercept=0, slope=1, colour="magenta")+
custom_colors
}
septimeplot <- function(data){
ggplot(data=data,aes(time1,time2)) + geom_point(aes(colour=race)) + ggtitle('Time (secs)') + xlab("First Run") + ylab("Second Run") +
stat_smooth(method='lm',colour="steelblue")+ facet_wrap(race~., nrow=2, scales="free") + guides(color = FALSE, size = FALSE) + custom_colors
}
septimeplot_paper <- function(data){
ggplot(data=data,aes(time1,time2)) + geom_point(aes(colour=number)) + ggtitle('Time (secs)') + xlab("First Run") + ylab("Second Run") +
stat_smooth(method='lm',colour="steelblue")+ facet_wrap(number~., nrow=4, scales="free") + guides(color = FALSE, size = FALSE) + custom_colors
}
racetotaltimeplot <- function(race){
data=read.csv(files[race])
ggplot(data=data,aes(time1,time1+time2)) + geom_point() + ggtitle('Total time (secs)') + xlab("First Run") + ylab("Total")
}
totaltimeplot <- function(data){
ggplot(data=data,aes(time1,time1+time2)) + geom_point(aes(colour=race)) + ggtitle('Total time (secs)') + xlab("First Run") + ylab("Total") +
stat_smooth(method='lm',colour="steelblue")+ labs(colour = "Event")+ custom_colors+ theme(legend.position="bottom")
}
timeplot_paper <- function(data){
ggplot(data=data,aes(time1,time2)) + geom_point(aes(shape=race))  + xlab("First run time (secs)") + ylab("Second run time (secs)") +
labs(shape = "Event")  +geom_abline(intercept=0, slope=1)+
scale_shape_manual(values=1:10)   + theme(axis.text=element_text(size=10),
axis.title=element_text(size=12))+ guides(shape = guide_legend(override.aes = list(size = 1)))+ theme(legend.title = element_text(size = 8),
legend.text = element_text(size = 8))
}
totaltimeplot_paper <- function(data){
ggplot(data=data,aes(time1,time1+time2)) + geom_point(aes(shape=race))  + xlab("First run time (secs)") + ylab("Total race time (secs)") +
labs(shape = "Event") + scale_shape_manual(values=1:10) +theme(axis.text=element_text(size=10),
axis.title=element_text(size=12))+ guides(shape = guide_legend(override.aes = list(size = 1)))+ theme(legend.title = element_text(size = 8),
legend.text = element_text(size = 8))
}
septotaltimeplot <- function(data){
ggplot(data=data,aes(time1,time1+time2)) + geom_point(aes(colour=race)) + ggtitle('Total time (secs)') + xlab("First Run") + ylab("Total") +
stat_smooth(method='lm',colour="steelblue")+ facet_wrap(race~., nrow=2, scales="free")+ guides(color = FALSE, size = FALSE)+ custom_colors
}
sim <- function(nrep = 1, nrace = 1, nracers = 30, sim_model = "gumbel", model = 1, allranks = FALSE, maxrank = 5,
alpha= exp(0.4), beta = 3, gamma= 10, e_mu = -1, e_beta=0.1, e_gamma= 0.5,
first_Run = TRUE, second_Run = TRUE, order1 = FALSE, order2 = FALSE, init = 0, seed = NULL){
if(!is.null(seed)) set.seed(seed)
outmat <- c()
outval <- c()
for(i in 1:nrep) {
points <- runif(nracers, 0, 10)
if(sim_model == "gumbel"){
df <-  g_all_race_sim(nrace=nrace, nracers=nracers, points = points, order1=order1,order2=order2, alpha = alpha, beta=beta,gamma = gamma)
true_pars <- c(beta, gamma, log(alpha))
}
else{
df <-  e_all_race_sim(nrace=nrace, nracers=nracers, points = points, order1=order1,order2=order2, mu = e_mu,  beta=e_beta,gamma = e_gamma)
true_pars <- c(e_mu, e_beta, e_gamma)
}
if(sim_model=="gumbel")
out <- fit(paste0("gum_model", model) %>% get, df, allranks=allranks,maxrank=maxrank, first_Run=first_Run, second_Run=second_Run, init=init)
else
out<- fit(paste0("exp_model", model) %>% get, df, allranks=allranks,maxrank=maxrank, first_Run=first_Run, second_Run=second_Run,init=init)
outmat <- rbind(outmat, out$par)
outval <- c(outval, out$opt$value)
}
#    browser()
list(true_pars, outmat, outval, apply(outmat,2,mean), apply(outmat,2,sd))
}
nracers = 30
fis_points <- rexp(nracers,1)
g_race_sim <- function(nracers = 30, points = fis_points, alpha=.5, beta = 5, gamma= 0, order1 = TRUE, order2 = TRUE){
df <- data.frame(racer=1:nracers, points=points)
if(order1) {
df <- arrange(df, points)
}
df$bib1 <- 1:nracers
df$time1 <- alpha*log(rexp(nracers,1)) + beta*df$points + gamma * df$bib1 / nracers
if(order2){
df <- arrange(df, desc(time1))
df$bib2 <- 1:nracers
}
else{
df$bib2 <- sample(1:nracers, nracers,replace=FALSE)
}
df$time2 <- alpha*log(rexp(nracers,1)) + beta*df$points + gamma * df$bib2 / nracers
df$total_time <- df$time1+df$time2
df$position <- rank(df$total_time)
arrange(df,position)
}
g_all_race_sim <- function(nrace=100, nracers = 30,  points = fis_points, alpha=exp(.4), beta=3, gamma = 10, order1 = TRUE, order2 = TRUE){
df  <- lapply(1:nrace,function(i)g_race_sim(nracers=nracers, points=points, alpha=alpha, beta=beta, gamma = gamma, order1 = order1, order2 = order2))
df <- do.call(rbind,df)
df$race <- rep(1:nrace,rep(nracers, nrace))
df
}
e_race_sim <- function(nracers = 30, points = fis_points, beta=.1, mu = -1, gamma= 0.5, order1 = TRUE, order2 = TRUE){
df <- data.frame(racer=1:nracers, points=points)
if(order1) {
df <- arrange(df, points)
}
df$bib1 <- 1:nracers
lambda <- exp(mu + beta*df$points + gamma * df$bib1 / nracers)
df$time1 <- rexp(nracers, lambda)
if(order2){
df <- arrange(df, desc(time1))
df$bib2 <- 1:nracers
}
else{
df$bib2 <- sample(1:nracers, nracers,replace=FALSE)
}
lambda <- exp(mu + beta*df$points + gamma * df$bib2 / nracers)
df$time2 <-  rexp(nracers, lambda)
df$total_time <- df$time1+df$time2
df$position <- rank(df$total_time)
arrange(df,position)
}
e_all_race_sim <- function(nrace=10, nracers = 30,  points = fis_points,  beta=.1, mu = -1, gamma = .5, order1 = TRUE, order2 = TRUE){
df  <- lapply(1:nrace,function(i)e_race_sim(nracers=nracers, points=points, mu=mu, beta=beta, gamma = gamma, order1 = order1, order2 = order2))
df <- do.call(rbind,df)
df$race <- rep(1:nrace,rep(nracers, nrace))
df
}
rsim <- function(nrep = 1, nrace = 1, nracers = 30, model = 1,  minrank = 5,
alpha= exp(0.4), beta = 3,  gamma = 0.5, order1 = FALSE, order2 = FALSE, init = 0, seed = NULL){
if(!is.null(seed)) set.seed(seed)
sim_model = "gumbel"
outpar <- c()
outse <- c()
points <- runif(nracers, 0, 10)
df <-  g_all_race_sim(nrace=nrace, nracers=nracers, points = points, order1=order1,order2=order2, alpha = alpha, beta=beta,gamma = gamma)
for(j in minrank:nracers){
out <- fit(paste0("gum_model", model) %>% get, df, allranks=FALSE,maxrank=j,init=init, if_hessian=TRUE)
outpar <- rbind(outpar,out$par)
outse <- rbind(outse, out$se)
}
#    browser()
if(model == 1){
p1 <- data.frame(rank = minrank:nracers, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:nracers, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue") + geom_hline(yintercept = beta, colour="red")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")+ geom_hline(yintercept = log(alpha),colour="red")
grid.arrange(plot1,plot2)
}
if(model == 2){
p1 <- data.frame(rank = minrank:nracers, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:nracers, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
p3 <- data.frame(rank = minrank:nracers, est = outpar[,3], lower = outpar[,3] - 1.96 * outse[,3], upper = outpar[,3] + 1.96 * outse[,3])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue") + geom_hline(yintercept = beta, colour="red")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")+ geom_hline(yintercept = gamma,colour="red")
plot3 <- ggplot(p3, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")+ geom_hline(yintercept = log(alpha),colour="red")
grid.arrange(plot1,plot2, plot3)
}
}
rsim_real <- function(nrep = 1, nrace = 1, race_number = 7, model = 1,  minrank = 5,
alpha= exp(0.4), beta = 3,  gamma = 0.5, first_Run=TRUE, second_Run=TRUE,
order1 = FALSE, order2 = FALSE, init = 0, seed = NULL, method = "Nelder-Mead"){
if(!is.null(seed)) set.seed(seed)
sim_model = "gumbel"
outpar <- c()
outse <- c()
df <- subset(alldata,race==races[race_number])
nracers <- nrow(df)
for(j in minrank:nracers){
out <- fit(paste0("gum_model", model) %>% get, df, allranks=FALSE,maxrank=j,init=init, if_hessian=TRUE, method=method, first_Run=first_Run,
second_Run=second_Run)
outpar <- rbind(outpar,out$par)
outse <- rbind(outse, out$se)
}
if(model == 1){
p1 <- data.frame(rank = minrank:nracers, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:nracers, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")
grid.arrange(plot1,plot2)
}
if(model == 2){
p1 <- data.frame(rank = minrank:nracers, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:nracers, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
p3 <- data.frame(rank = minrank:nracers, est = outpar[,3], lower = outpar[,3] - 1.96 * outse[,3], upper = outpar[,3] + 1.96 * outse[,3])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")
plot3 <- ggplot(p3, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")
grid.arrange(plot1,plot2, plot3)
}
outpar
}
rsim_e <- function(nrep = 1, nrace = 1, nracers = 30, model = 1,  minrank = 5, maxrank=10,
e_mu= -1, e_beta = 0.1,  e_gamma = 0.5, order1 = FALSE, order2 = FALSE, init = 0, seed = NULL, method = "Nelder-Mead"){
if(!is.null(seed)) set.seed(seed)
sim_model = "exp"
outpar <- c()
outse <- c()
points <- runif(nracers, 0, 10)
df <-  e_all_race_sim(nrace=nrace, nracers=nracers, points = points, order1=order1,order2=order2, mu=e_mu, beta=e_beta,gamma = e_gamma)
for(j in minrank:maxrank){
cat(j, fill=T)
out <- fit(paste0("exp_model", model) %>% get, df, allranks=FALSE,maxrank=j,init=init, if_hessian=TRUE, method = method)
outpar <- rbind(outpar,out$par)
outse <- rbind(outse, out$se)
}
#    browser()
if(model == 1){
p1 <- data.frame(rank = minrank:maxrank, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:maxrank, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue") + geom_hline(yintercept = e_mu, colour="red")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")+ geom_hline(yintercept = e_beta,colour="red")
grid.arrange(plot1,plot2)
}
if(model == 2){
p1 <- data.frame(rank = minrank:maxrank, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:maxrank, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
p3 <- data.frame(rank = minrank:maxrank, est = outpar[,3], lower = outpar[,3] - 1.96 * outse[,3], upper = outpar[,3] + 1.96 * outse[,3])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue") + geom_hline(yintercept = e_mu, colour="red")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")+ geom_hline(yintercept = e_beta,colour="red")
plot3 <- ggplot(p3, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")+ geom_hline(yintercept = e_gamma,colour="red")
grid.arrange(plot1,plot2, plot3)
}
}
rsim_e_real <- function(nrep = 1, nrace = 1, nracers = 30, race_number = 7, model = 1,  minrank = 5, maxrank=10,
e_mu= -1, e_beta = 0.1,  e_gamma = 0.5, order1 = FALSE, order2 = FALSE,
first_Run = TRUE, second_Run = TRUE, init = 0, seed = NULL, method = "Nelder-Mead"){
if(!is.null(seed)) set.seed(seed)
sim_model = "exp"
outpar <- c()
outse <- c()
df <- subset(alldata,race==races[race_number])
nracers <- nrow(df)
for(j in minrank:maxrank){
cat(j, fill=T)
out <- fit(paste0("exp_model", model) %>% get, df, allranks=FALSE,maxrank=j, first_Run=first_Run, second_Run=second_Run, init=init, if_hessian=TRUE, method = method)
outpar <- rbind(outpar,out$par)
outse <- rbind(outse, out$se)
}
if(model == 1){
p1 <- data.frame(rank = minrank:maxrank, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:maxrank, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")
grid.arrange(plot1,plot2)
}
if(model == 2){
p1 <- data.frame(rank = minrank:maxrank, est = outpar[,1], lower = outpar[,1] - 1.96 * outse[,1], upper = outpar[,1] + 1.96 * outse[,1])
p2 <- data.frame(rank = minrank:maxrank, est = outpar[,2], lower = outpar[,2] - 1.96 * outse[,2], upper = outpar[,2] + 1.96 * outse[,2])
p3 <- data.frame(rank = minrank:maxrank, est = outpar[,3], lower = outpar[,3] - 1.96 * outse[,3], upper = outpar[,3] + 1.96 * outse[,3])
plot1 <- ggplot(p1, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2),colour="steelblue")
plot2 <- ggplot(p2, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")
plot3 <- ggplot(p3, aes(rank, est)) + geom_point() + geom_errorbar(aes(ymin=lower,ymax=upper,width=0.2), colour="steelblue")
grid.arrange(plot1,plot2, plot3)
}
}
pred(alldata,7,mod_fit$par,gum_model5)
fit(gum_model2, alldata, first_Run =FALSE,allranks=FALSE,maxrank=15,if_hessian=FALSE,init=0.1,method="BFGS",print=TRUE, exclude_second_Run = 7)
fit(gum_model2, alldata, first_Run =FALSE,allranks=FALSE,maxrank=15,if_hessian=FALSE,init=0.1,method="BFGS",print=TRUE)
library(shiny); runApp('apps/app_horse_race_game.R')
activity8_run_app()
library(pws)
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()

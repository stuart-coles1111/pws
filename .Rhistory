a1_s2_analysis(activity1_data_sm, d=5)
pws::mean_max_run_length
pws:::mean_max_run_length
pws:::variance_max_run_length
data("a1_data_sm")
a1_s1_analysis(a1_data_sm)
ls()
a1_data_sm = activity1_data_sm
use_r("data")
use_r("data")
a1_data_sm
save(a1_data_sm,"data/a1_data_sm")
save(a1_data_sm,file="data/a1_data_sm")
use_r("data")
use_r("data")
a1_data_sm
save(a1_data_sm,"data/a1_data_sm")
save(a1_data_sm,file="data/a1_data_sm.rda")
use_r("data")
a1_s2_analysis(a1_data_sm)
a1_data_sm
debugonce(a1_s2_analysis)
a1_s2_analysis(a1_data_sm)
mean_max_run_length
pws:::mean_max_run_length
a1_s2_analysis a1_s2_analysis
a1_s2_analysis
a1_s2_analysis
ls()
rm(list=ls())
a1_s2_analysis
use_r("data")
ls()
activity1_data_sm=a1_data_sm
save(activity1_data_sm,file="data/activity1_data_sm")
use_r("data")
use_r("data")
ls()
data(activity1_data_sm)
use_r("data")
save(activity1_data_sm,file="data/activity1_data_sm.rda")
use_r("data")
use_r("data")
PLtg_df <- read.csv('~/GitHub/Playing-With-Statistics/book/book_r/book/data/PLtg.csv)
PLtg_df <- read.csv('~/GitHub/Playing-With-Statistics/book/book_r/book/data/PLtg.csv')
PLtg_df[,1]
PLtg_df[1,]
mean(subset(PLtg_df, season=='2022')$tg)%>%round(3
)
tg_df <- read.csv('~/GitHub/Playing-With-Statistics/book/book_r/book/data/bookieTG.csv')
tg_df[1,]
PLtg_df[1,]
PLtg_df=PLtg_df[,c(1,2,5)]
names(PLtg_df)
names(PLtg_df)[3]="goals"
tail(PLtg_df[1,])
tail(PLtg_df)
dim(PLtg_df)
ls()
usethis::use_import_from(package = "scales", fun = pretty_breaks)
scales::pretty_breaks()
usethis::use_import_from(package = "scales", fun = "pretty_breaks")
usethis::use_import_from(package = "scales", fun = "pretty_breaks")
usethis::use_import_from(package = "magrittr", fun = "%>%")
xGsim <-
function(n_data = 10000,
bodypar = 0.2,
distpar = 0.2,
anglepar = 3,
intercept = 0.25,
dist_coeff = -0.1,
dist_body_inter = -0.25,
body_coeff = -0.05,
angle_coeff = -0.8,
seed = 99) {
if (!is.null(seed))
set.seed(seed)
body <-
sample(
c("Head", "Foot"),
n_data,
replace = T,
prob = c(bodypar, 1 - bodypar)
)
distance <- rexp(n_data, distpar) %>% round(3)
angle <- 180 * (rbeta(n_data, anglepar, anglepar) - .5) %>% round(3)
lp <-
intercept +  dist_coeff * distance + dist_body_inter * distance * (body ==
"Head") + body_coeff * (body == "Head") + angle_coeff * sin(angle * pi /
180)
p <- (exp(lp) / (1 + exp(lp))) %>% round(3)
goal <- rbinom(n_data, 1, p)
df <- data.frame(
distance = distance,
angle = angle,
body = body,
prob_true = p,
goal = goal
)
df$x <- (distance * sin(df$angle * pi / 180)) %>% round(3)
df$y <- (distance * cos(df$angle * pi / 180)) %>% round(3)
df <-
df[, c("x", "y", "distance", "angle", "body", "prob_true", "goal")]
df$goal <- factor(df$goal)
list(
data = df,
pars = c(
intercept,
body_coeff,
dist_coeff,
angle_coeff,
dist_body_inter
)
)
}
xGsim()
reshape::melt
reshape2::melt
usethis::use_import_from("reshape2","melt")
usethis::use_import_from("reshape2","melt")
usethis::use_import_from("gridExtra","grid.arrange")
use_package("ggplot2")
usethis::use_package("ggplot2")
h_max_run_cdf <- function(n, x) {
if (x >= n)
cdf <- 1
else
{
A <- c()
A[1:(x + 1)] <- 2 ^ (0:x)
for (i in (x + 2):(n + 1))
A[i] <- sum(A[(i - (x + 1)):(i - 1)])
cdf <- A[n + 1] / (2 ^ n)
}
cdf
}
h_max_run_cdf(20,5)
rm(h_max_run_cdf)
h_max_run_cdf
ls()
library(pws)
ls()
activity1_data_entry(3)
library(pws)
activity1_data_entry(3)
activity1_data_entry(3)
activity4_execute ()
H
??mvrnorm
usethis::use_import_from("MASS","mvrnorm")
quiz_true_answers <- read.csv('~/GitHub/Playing-With-Statistics/book/book_r/book/data/quiz_true_answers.csv')
quiz_true_answers
usethis::use_r("activity5_data_answers")
usethis::use_r("activity5_data_answers")
ls()
activity5_quiz_answers=quiz_true_answers
save(activity5_quiz_answers,file="(activity5_quiz_answers.rda")
save(activity5_quiz_answers,file="(data/activity5_quiz_answers.rda")
save(activity5_quiz_answers,file="data/activity5_quiz_answers.rda")
activity5_all_responses <- read.csv('~/GitHub/Playing-With-Statistics/book/book_r/book/data/quiz_all_team_answers.csv')
dim(activity5_all_responses)
activity5_all_responses
help(group_by)
subset(activity5_quiz_answers, team ==1)
help("subset")
??subset
dplyr::subset
plyr::subset
class(activity5_quiz_answers)
subset(activity5_quiz_answers, "team" ==1)
subset(activity5_quiz_answers, team ==1)
subset(activity5_quiz_answers, team ==1)
subset(activity5_quiz_answers, select = (team ==1))
colnamesactivity5_quiz_answers)
colnames(activity5_quiz_answers)
subset(activity5_all_responses, team ==1)
activity5_responses_sm=activity5_all_responses
save(activity5_responses_sm,file="data/activity5_responses_sm.rda")
save(activity5_responses_sm,file="data/activity5_responses_sm.rda")
usethis::use_r("activity5_responses_sm")
quiz_score_check <- function(G,
S,
T,
alpha = 0.95,
lines = FALSE,
final_score_only = FALSE,
dp = 2) {
#get score information
score <- quiz_score(G, S, T, alpha, dp = dp)
sigma <- score$sigma
score <- score$scores
#create dataframe for plotting points
x <- seq(G - 3 * sigma, G + 3 * sigma, length = 1000)
y <- dnorm(x, G, sigma)
z <- log(y)
m <- data.frame(x = x, y = y, z = z)
paste0("Score is ", round(score, 2)) %>% print
if (lines) {
p1 <-
ggplot(aes(x = x, y = y), data = m) + geom_line(colour = "indianred4") + geom_vline(xintercept = T, color = 'red') + xlab('T') + ylab('') +
ggtitle('Normal Score') + shade_curve(m, G - S, G + S, fill = "lightblue") +
xlim(min(x), max(x)) + theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14)) +
geom_hline(yintercept = exp(score), color = 'green')
p2 <-
ggplot(aes(x = x, y = z), data = m) + geom_line(colour = "indianred4") + geom_vline(xintercept = T, color = 'red') + xlab('T') + ylab('') + ggtitle(paste0('Final Score = ', round(score, 2))) +
geom_hline(yintercept = score, color = 'green') + xlim(min(x), max(x)) + theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
}
else{
p1 <-
ggplot(aes(x = x, y = y), data = m) + geom_line(colour = "indianred4") + xlab('T') + ylab('') + ggtitle('Normal Score') +
shade_curve(m, G - S, G + S, fill = "lightblue") + xlim(min(x), max(x)) +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
p2 <-
ggplot(aes(x = x, y = z), data = m) + geom_line(colour = "indianred4") + xlab('T') + ylab('') + ggtitle(paste0('Final Score = ', round(score, 2))) +
xlim(min(x), max(x)) + theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
}
if (final_score_only) {
p2
}
else{
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
}
}
quiz_score <- function(G, S, T, alpha = 0.95, dp = 2) {
#calculate standard deviation based on probability of interval
sigma <- S / qnorm((1 + alpha) / 2)
#calculate score
score <- dnorm(G, T, sigma, log = TRUE) %>% round(dp)
list(scores = score,
total_score = sum(score),
sigma = sigma)
}
quiz_score_check(150, 20, quiz_true_answers$Answer[1], lines = T)
library(ggplot2)
quiz_score_check(150, 20, quiz_true_answers$Answer[1], lines = T)
shade_curve <-
function(MyDF,
zstart,
zend,
fill = "red",
alpha = .5) {
geom_ribbon(
data = subset(MyDF, x >= zstart
& x <= (zend)),
aes(ymin = 0, ymax = y),
fill = fill,
color = NA,
alpha = alpha
)
}
shade_curve <-
function(MyDF,
zstart,
zend,
fill = "red",
alpha = .5) {
geom_ribbon(
data = subset(MyDF, x >= zstart
& x <= (zend)),
aes(ymin = 0, ymax = y),
fill = fill,
color = NA,
alpha = alpha
)
}
quiz_score_check(150, 20, quiz_true_answers$Answer[1], lines = T)
??grid.draw
(activity5_quiz_answers)
quiz_score_check <- function(G,
S,
T,
alpha = 0.95,
lines = FALSE,
final_score_only = FALSE,
dp = 2) {
#get score information
score <- quiz_score(G, S, T, alpha, dp = dp)
sigma <- score$sigma
score <- score$scores
#create dataframe for plotting points
x <- seq(G - 3 * sigma, G + 3 * sigma, length = 1000)
y <- dnorm(x, G, sigma)
z <- log(y)
m <- data.frame(x = x, y = y, z = z)
paste0("Score is ", round(score, 2)) %>% print
if (lines) {
p1 <-
ggplot(aes(x = x, y = y), data = m) + geom_line(colour = "indianred4") + geom_vline(xintercept = T, color = 'red') + xlab('T') + ylab('') +
ggtitle('Normal Score') + shade_curve(m, G - S, G + S, fill = "lightblue") +
xlim(min(x), max(x)) + theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14)) +
geom_hline(yintercept = exp(score), color = 'green')
p2 <-
ggplot(aes(x = x, y = z), data = m) + geom_line(colour = "indianred4") + geom_vline(xintercept = T, color = 'red') + xlab('T') + ylab('') + ggtitle(paste0('Final Score = ', round(score, 2))) +
geom_hline(yintercept = score, color = 'green') + xlim(min(x), max(x)) + theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
}
else{
p1 <-
ggplot(aes(x = x, y = y), data = m) + geom_line(colour = "indianred4") + xlab('T') + ylab('') + ggtitle('Normal Score') +
shade_curve(m, G - S, G + S, fill = "lightblue") + xlim(min(x), max(x)) +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
p2 <-
ggplot(aes(x = x, y = z), data = m) + geom_line(colour = "indianred4") + xlab('T') + ylab('') + ggtitle(paste0('Final Score = ', round(score, 2))) +
xlim(min(x), max(x)) + theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
}
if (final_score_only) {
p2
}
else{
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
}
}
quiz_score(150, 20, quiz_true_answers$Answer[1], lines = T)
quiz_score(150, 20, quiz_true_answers$Answer[1])
quiz_score_check(150, 20, quiz_true_answers$Answer[1])
library(grid)
quiz_score_check(150, 20, quiz_true_answers$Answer[1])
usethis::use_import_from("grid","grid.draw")
rm(list=ls())
activity5_question_analysis(150, 20, quiz_true_answers$Answer[1], lines = T, final_score_only = TRUE)
activity5_question_analysis(150, 20, quiz_true_answers$Answer[1], lines = T, final_score_only = TRUE)
activity5_question_analysis(150, 20, activity5_quiz_answers$Answer[1], lines = T)
activity5_question_analysis(150, 20, activity5_quiz_answers$Answer[1], lines = T, final_score_only = T)
quiz_score_matrix(quiz_single_team_answers, quiz_true_answers)
quiz_score_matrix <-
function(quiz_matrix, quiz_true_answers, alpha = 0.95, dp = 2) {
#calculate standard deviation based on probability of interval
sigma <- quiz_matrix$S / qnorm((1 + alpha) / 2)
#calculate score
score <-
dnorm(quiz_matrix$G, quiz_true_answers$Answer, sigma, log = TRUE) %>% round(dp)
score_df <-
data.frame(
question = 1:10,
G = quiz_matrix$G,
S = quiz_matrix$S,
T = quiz_true_answers$Answer,
score = score
)
list(scores = score_df, total_score = sum(score))
}
quiz_score_matrix(quiz_single_team_answers, quiz_true_answers)
quiz_score_matrix(activity5_quiz_answera, quiz_true_answers)
temp=subset(activity5_responses_sm)
temp=subset(activity5_responses_sm,team==1
)
quiz_score_matrix(temp, activity5_quiz_answers)
temp
quiz_multi_score_check <-
function(quiz_matrix, quiz_true_answers, alpha = 0.95, dp = 2) {
nteams <- length(unique(quiz_matrix$team))
score <-
sapply(unique(quiz_matrix$team), function(x)
quiz_score_matrix(subset(quiz_matrix, team == x), quiz_true_answers, alpha = alpha, dp = dp)[[2]])
data.frame(team = unique(quiz_matrix$team), score = score)
}
quiz_multi_score_checj(temp, activity5_quiz_answers)
quiz_multi_score_check(temp, activity5_quiz_answers)
quiz_multi_score_check((activity5_responses_sm, activity5_quiz_answers)
quiz_multi_score_check(activity5_responses_sm, activity5_quiz_answers)
activity5_response_analysis(150, 20, activity5_quiz_answers$Answer[1], lines = T)
team1_score  <- subset(activity5_responses_sm, team == 1)
activity5_matrix_analysis(team1_score, activity5_quiz_answers)
activity5_teams_analysis(activity5_responses_sm, activity5_quiz_answers)
activity5_teams_analysis(activity5_responses_sm, activity5_quiz_answers) %>% head
detach("package:ggplot2", unload = TRUE)
ggplot2::shade_curve
players<- read.csv('~/GitHub/Playing-With-Statistics/book/book_r/book/data/players.csv')
players<- read.csv('~/GitHub/Playing-With-Statistics/book/book_r/book/data/player_names.csv')
players
activity6_player_names = players
save(activity6_player_names,file="data/activity6_player_names.rda")
usethis::use_r("activity6_player_names")
activity6_data_entry <- function(nplayers = 32) {
player_vector <- c()
count <- 0
while (count < nplayers) {
count <- count + 1
player <- readline(prompt = paste0("Name of Player ",count, ": ")
player_vector <- c(player_vector, player)
activity6_data_entry <- function(nplayers = 32) {
player_vector <- c()
count <- 0
while (count < nplayers) {
count <- count + 1
player <- readline(prompt = paste0("Name of Player ",count, ": "))
player_vector <- c(player_vector, player)
}
return(player_vector)
}
activity6_data_entry(3)
activity6_data_entry(3)
help(activity6_randomise_players)
library(pws)
%>%
1:10 %>% head
activity5_responses_sm
br()
??br
shiny::br
shiny::column
shiny::tags
shiny::textOutput
shiny::dashboardBody
shinydashboard::dashboardBody
shiny::tabPanel
h3
shiny::h3
shiny::hr
??invalidateLater
shiny::showModal
shiny::observeEvent
??renderDT
DT::renderDT
DT::datatable
shiny::updateTabsetPanel
shiny::insertUI
??use_import_from
usethis::use_import_from("shinydashboard",c("dashboardPage", "dashboardHeader","dashboardSidebar","dashboardBody"))
usethis::use_import_from("shiny", c("selectInput","br","hr","h3","column","fluidRow","actionButtonStyled","tags",
"textOutput","tabsetPanel","tabPanel","plotOutput","imageOutput","reactiveVal","renderText","invalidateLater","observe","isolate","showModal","modaldiallog","observeEvent","reactiveValues","validate","updateTabsetPanel","insertUI","renderImage","shinyApp")
)
usethis::use_import_from("shiny", c("selectInput","br","hr","h3","column","fluidRow","tags",
"textOutput","tabsetPanel","tabPanel","plotOutput","imageOutput","reactiveVal","renderText","invalidateLater","observe","isolate","showModal","modaldiallog","observeEvent","reactiveValues","validate","updateTabsetPanel","insertUI","renderImage","shinyApp")
)
usethis::use_import_from("shiny", c("selectInput","br","hr","h3","column","fluidRow","tags",
"textOutput","tabsetPanel","tabPanel","plotOutput","imageOutput","reactiveVal","renderText","invalidateLater","observe","isolate","showModal","modaldialog","observeEvent","reactiveValues","validate","updateTabsetPanel","insertUI","renderImage","shinyApp")
)
usethis::use_import_from("shiny", c("selectInput","br","hr","h3","column","fluidRow","tags",
"textOutput","tabsetPanel","tabPanel","plotOutput","imageOutput","reactiveVal","renderText","invalidateLater","observe","isolate","showModal","modalDialog","observeEvent","reactiveValues","validate","updateTabsetPanel","insertUI","renderImage","shinyApp")
)
usethis::use_import_from("shinyjs","useShinyjs")
usethis::use_import_from("DT",c("DTOutput","renderDT","datatable"))
usethis::use_import_from("dipsaus","actionButtonStyled")
rm(list=ls())
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app
activity8_run_app()
system('pwd')
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
activity8_run_app()
PL_goals
PL_points
tail(PL_points)
dim(PL_points)
10640/380
dim(PL_goals)
PL_goals[1,]
ttt=load("temp.rda")
systeem('pwd')
system('pwd')
ttt=load("~/temp.rda")
ttt=load("../temp.rda")
ttt
load("~/pws/temp.rda")
ls()
temp
temp[1,]
dim(temp)
temp1=PL_points
temp1
temp1[,1]
temp1[1,]
temp[1,]
temp1=rbind(temp1,temp[,c(1,2,3,4,8,9)])
temp1
tail(temp[1,])
tail(temp1)
unique(temp1$season)
temp1$season[temp1$season=="2023-2024"]<-2023
unique(temp1$season)
temp1$season=as.numeric(temp1$season)
unique(temp1$season)
dim(temp1$season)
length(temp1$season)
length(PL_points$season)
11020-10640
PL_goals
PL_goals[1,]
temp2=PL_goals
temp[1,]
temp$season=2023
temp2=rbind(temp2,temp[,c(1,2,7)])
dim(temp2)
dim(PL_goals)
12406-12026
PL_goals=temp2
save(PL_goals,file="data/PL_goals.rda")
save(PL_goals,file="../data/PL_goals.rda")
PL_points=temp1
save(PL_points,file="../data/PL_points.rda")
dim(PL_goals)
dim(PL_points)
tail(PL_points)
dim(PL_points)
help(write.csv)
